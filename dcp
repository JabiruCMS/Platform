#!/bin/bash

if docker-compose &> /dev/null; then
    COMPOSE=docker-compose
elif docker compose &> /dev/null; then
    COMPOSE="docker compose"
elif /usr/local/bin/docker-compose-1.29 &> /dev/null ; then
    COMPOSE="/usr/local/bin/docker-compose-1.29"
else
    echo "Docker Compose does not seem to be installed. Aborting ..."
    exit 1;
fi

CONTAINER_LINE=$(grep -E -i 'container_name:(.*)php' docker-compose.yml)
APP_CONTAINER=${CONTAINER_LINE/container_name: /}
# IF app container detection does not work, you can uncomment the line below and put it there directly
# APP_CONTAINER=

if [ -z "$APP_CONTAINER" ]; then
    echo "App container not found. Aborting ...";
    exit 1
fi

echo Using ${COMPOSE} on container "${APP_CONTAINER}"

if [ $# -gt 0 ]; then
    if [ "$1" == "build" ]; then
        $COMPOSE up --build
    elif [ "$1" == "up" ]; then
        $COMPOSE up
    elif [ "$1" == "reload" ] || [ "$1" == "restart" ] || [ "$1" == "rs" ] || [ "$1" == "rl" ]; then
        $COMPOSE down && $COMPOSE up -d
    elif [ "$1" == "artisan" ] || [ "$1" == "art" ] || [ "$1" == "a" ]; then
        shift 1
        EXEC_CMD="cd /var/www && php artisan $@"
        $COMPOSE exec $APP_CONTAINER bash -c "$EXEC_CMD"
    elif [ "$1" == "bin/console" ]; then
        shift 1
        EXEC_CMD="cd /var/www && php bin/console $@"
        $COMPOSE exec $APP_CONTAINER bash -c "$EXEC_CMD"
    elif [ "$1" == "app/console" ]; then
        shift 1
        EXEC_CMD="cd /var/www && php app/console $@"
        $COMPOSE exec $APP_CONTAINER bash -c "$EXEC_CMD"
    elif [ "$1" == "composer" ]; then
        shift 1
        EXEC_CMD="cd /var/www && composer $@"
        $COMPOSE exec $APP_CONTAINER bash -c "$EXEC_CMD"
    else
        $COMPOSE $@
    fi
else
    $COMPOSE ps
fi
